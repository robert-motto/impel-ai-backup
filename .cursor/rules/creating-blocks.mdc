---
description: 
globs: 
alwaysApply: true
---
alwaysApply: true

# Instructions for Creating WordPress Blocks from Figma Designs

## 1. Analyze the Figma Design
- When provided with a link to Figma design always connect to Figma via MCP server. If can't establish connection, abort everything and ask user for a fix. 
- Study the design carefully, noting all elements, spacing, and responsive behavior
- Identify the block's purpose and main components (headings, content, media, special elements)
- Note color schemes, typography, and interaction patterns
- Use the Figma dev mode to inspect exact measurements, colors, and font styles

## 2. Plan the Block Structure
- Determine the block name using kebab-case (e.g., `content-block-left-right-with-metrics`)
- Identify required ACF fields based on content elements in the design (include carousel settings like autoplay, pause on hover, slides per view)
- Map out the HTML structure following BEM naming conventions, ensuring correct Swiper container (`.swiper`), wrapper (`.swiper-wrapper`), and slide (`.swiper-slide`) classes are used alongside BEM classes.
- Plan the responsive behavior based on breakpoints defined in `_mixins.scss`

## 3. Create the Block Files
- Create a new directory in `parts/blocks/your-block-name/`
- Create essential files:
  - `fields.php` - ACF field definitions
  - `template.php` - HTML template structure
  - `your-block-name.scss` - Block-specific styles
  - `your-block-name.js` - (If JavaScript is needed, e.g., for Swiper initialization)

## 4. Implement ACF Fields
- Use the existing blocks as reference for field structure
- Always include section settings clone field at the beginning
- Add layout variant fields for alternate appearances (e.g., text-left/text-right)
- Include appropriate fallback values for all fields
- Follow field naming conventions from existing blocks
- Use field types that match content requirements (WYSIWYG, Image, Repeater, etc.)
- When using Repeater, rememeber to end it with `->endRepeater()`
- Do not use `sub_fields` property, instead use `->` syntax
- For carousels, include fields for settings (e.g., autoplay speed, pause on hover, slides per view for desktop, show scrollbar).

## 5. Build the Template Structure
- Implement fallback mechanisms for required media (follow exact fallback pattern from hero blocks)
- Use proper escaping for all outputs (`esc_attr`, `esc_url`, `esc_html`)
- Structure HTML with appropriate nested elements.
- **Swiper HTML:** Ensure the correct structure: a main container (e.g., `your-block__carousel .swiper .js-your-block-swiper`), containing `.swiper-wrapper`, which contains the `.swiper-slide` elements. Navigation/scrollbar elements should be siblings of the main Swiper container.
- Add data attributes for JavaScript hooks and settings (e.g., `data-autoplay`, `data-slides-per-view`).
- Include conditional logic for optional elements.
- Use BEM class naming for all elements alongside Swiper classes.

## 6. Style with SCSS
- Place the SCSS file in the block directory (not in src/sass/03_sections/ unless it's Above The Fold)
- Use SCSS nesting with BEM naming convention
- Use existing CSS variables from `_variables.scss` for colors and spacing
- Include responsive styles using mixins (`@include lg`, `@include mobile`, etc.)
- Use `fluid()` function for responsive sizing
- Use `rem()` function for fixed pixel values
- Use `calc()` for proportional line-height values
- Add `@use 'config' as *;` at the top of file
- **Swiper SCSS:** Do not rely solely on base Swiper CSS. Within the block's scope (e.g., inside `.your-block__carousel`):
    - Style `.swiper-wrapper` with `display: flex; align-items: stretch;`
    - Style `.swiper-slide` with `display: flex; flex-direction: column; width: auto; height: auto; flex-shrink: 0;`
    - Ensure the immediate child of `.swiper-slide` (your BEM `__item` element) has `width: 100%; height: 100%;`
    - Ensure the card/content container within the item has `height: 100%;`
    - Set `overflow: hidden;` on the main Swiper container (`.your-block__carousel`).

## 7. Implement JavaScript (if needed)
- **Swiper JS:**
    - Import Swiper and necessary modules (Navigation, Autoplay, Scrollbar) and their CSS.
    - Select the main Swiper container (e.g., `.js-your-block-swiper`).
    - Read settings from data attributes passed from PHP.
    - Use explicit `slidesPerView` values in breakpoints (e.g., 1 for mobile, 2 for tablet, ACF value for desktop). Avoid `slidesPerView: 'auto'`.
    - Conditionally enable `loop` based on `slides.length > slidesPerViewDesktop`.
    - Conditionally add modules (e.g., Scrollbar) and config sections (navigation, scrollbar, autoplay) based on ACF settings and element existence.
    - Use `closest()` to reliably find related navigation/scrollbar elements from the Swiper container.
    - Use the standard `DOMContentLoaded`/`init` pattern.
    - Reference `logos-certification.js` and `carousel-slider.js` for working examples.

## 8. Integration
- Update `inc/gutenberg.php` to add the new block to allowed blocks list
- Add block meta comments at the top of template.php:
```php
<?php /*
    Block Name: Your Block Name
    Block Align: center
    Block Icon: appropriate-dashicon
*/ ?>
```

## 9. Follow Established Patterns
- Study similar blocks before starting implementation
- Match exact conditional logic patterns for optional elements
- Follow exact fallback implementation patterns
- Use existing components with `get_acf_components()` for buttons and other reusable elements
- Follow the section class structure: `l-section l-section--your-block-name`
- Wrap content with `l-wrapper` for container width constraints

## 10. Using Reusable Components (CRITICAL)
- **Correct format for get_acf_components()** - This is a common source of errors:
  ```php
  // CORRECT STRUCTURE - Always use this exact pattern:
  get_acf_components([
      'buttons' => [           // Component type as array key
          'data'    => $buttons_group,  // Raw field data
          'classes' => 'block-name__buttons', // CSS classes
      ],
  ]);
  
  // WRONG - Never use this pattern:
  // $buttons = get_acf_components('buttons', $buttons_group);
  ```
- for fields.php its just:
```php
    ->addField('buttons', 'clone', [
        'clone' => [
            'group_buttons',
        ]
    ])
```
- Always pass a single array parameter to get_acf_components with component types as keys
- For buttons, retrieve the field data with `$buttons_group = $group['buttons_group'] ?? [];`
- Never try to manipulate the buttons data before passing it to get_acf_components
- Study the tertiary-cta and content-block-left-right templates for reference implementations
- When adding button fields, clone the 'buttons' field group and name it 'buttons_group'
- Always provide default button values in fields.php when adding button components

## 11. Critical Implementation Notes
- Never place non-Above The Fold component styles in the src/sass/03_sections/ directory
- Always implement proper fallback images using the main theme's screenshot.jpg
- Use js-prefixed classes only for JavaScript hooks, never in SCSS
- Use l-prefixed classes for layout components
- Strictly follow BEM naming (block__element--modifier)
- Only use CSS variables defined in _variables.scss
- Check for element existence before outputting it
- Use exact conditional patterns from existing blocks
- **Swiper Specific:** Remember the explicit SCSS styles needed for `.swiper-wrapper` and `.swiper-slide` within your block's scope.

## 12. Testing
- Test on all breakpoints for responsive behavior
- Verify BEM naming consistency across templates and SCSS
- Check all conditional logic matches existing patterns
- Test with empty fields to ensure fallbacks work correctly
- Validate escaping for all output
- Test carousels with different numbers of slides to ensure looping activates/deactivates correctly.

Remember: Maintainability and consistency are paramount. Study existing blocks thoroughly before creating new ones, and always follow established patterns exactly as implemented in the codebase.